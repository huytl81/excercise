@page "/checkout"
@using BlazingPizza.Services
@inject OrderState PizzaOrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    @* <EditForm Model=PizzaOrder.DeliveryAddress OnSubmit=CheckSubmission> *@
    @* <EditForm Model=PizzaOrder.DeliveryAddress OnValidSubmit=PlaceOrder OnInvalidSubmit=ShowError> *@
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="PizzaOrder" />
            </div>

            <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
                @if (isError) 
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="PizzaOrder.DeliveryAddress" />
            </div>
            
        </div>
        @* <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled="@_isSubmitting">Place order</button> *@
        @* <button class="checkout-button btn btn-warning" disabled=@_isSubmitting>Place order</button> *@
        <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>Place order</button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order PizzaOrder => PizzaOrderState.PizzaOrder;
    private bool _isSubmitting;
    bool isError = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new(PizzaOrder.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    protected void ShowError()
    {
        isError = true;
    }

    private async Task CheckSubmission(EditContext editContext)
    {
        _isSubmitting = true;

        var model = editContext.Model as Address;

        isError = string.IsNullOrWhiteSpace(model?.Name) || string.IsNullOrWhiteSpace(model?.Line1) || string.IsNullOrWhiteSpace(model?.PostalCode);
        if (!isError)
        {
            await PlaceOrder();
        }

        _isSubmitting = false;
    }
    async Task PlaceOrder()
    {
        isError = false;
        _isSubmitting = true;

        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/order", PizzaOrderState.PizzaOrder);
        var newOrderId= await response.Content.ReadFromJsonAsync<int>();

        PizzaOrderState.ResetOrder();

        NavigationManager.NavigateTo($"/orderdetail/{newOrderId}");
    }
}