@using BlazingPizza.Services
@inject OrderState PizzaOrderState
@inject IJSRuntime jsRuntime

<div class="sidebar">
    @if (PizzaOrder.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in PizzaOrder.Pizzas)
            {
              <div class="cart-item">
                  <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                  <div class="item-price">
                      @configuredPizza.GetFormattedTotalPrice()
                  </div>
                  @* <a @onclick="@(() => PizzaOrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a> *@
                  <a @onclick="@(async () => await RemovePizzaConfirmation(configuredPizza))" class="delete-item">X</a>
              </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(PizzaOrder.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@PizzaOrder.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(PizzaOrderState.PizzaOrder.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
        [Parameter]
        public Order PizzaOrder {get; set;}

        async Task RemovePizzaConfirmation(Pizza removePizza)
        {
            var messageParams = new
            {
                title = "Remove Pizza?",
                text = $"""Do you want to remove the "{removePizza.Special!.Name}" from your order?""",
                icon = "warning",
                buttons = new
                {
                    abort = new { text = "No, leave it in my order", value = false },
                    confirm = new { text = "Yes, remove pizza", value = true }
                },
                dangerMode = true
            };

            if (await jsRuntime.InvokeAsync<bool>("swal", messageParams))
            {
                PizzaOrderState.RemoveConfiguredPizza(removePizza);
            }
        }
}
